#include<stdio.h>
#include<unistd.h>
#include<sys/types.h>
int main()
{
	again:
	int choice;
	 printf("Enter 1 for Non-Premption and 2 for Premption : ");
	 scanf("%d",&choice);
	 
if(choice==2)
	{
	 int a[10],b[10],x[10];
	 int waiting[10],turnaround[10],completion[10];
	 int i,j,smallest,count=0,time,n;
	 double avg=0,tt=0,end;
	 
	 printf("\nEnter the number of Processes: ");
	 scanf("%d",&n);
	 for(i=0;i<n;i++)
	 {
	   printf("\nEnter arrival time of process %d : ",i+1);
	   scanf("%d",&a[i]);
	 }
	 for(i=0;i<n;i++)
	 {
	   printf("\nEnter burst time of process %d : ",i+1);
	   scanf("%d",&b[i]);
	 }
	 for(i=0;i<n;i++)
	 x[i]=b[i];
	
	  b[9]=9999;
	 //printf("time => process number");
	 for(time=0;count!=n;time++)
	 {
	   smallest=9;
	  for(i=0;i<n;i++)
	  {
	   if(a[i]<=time && b[i]<b[smallest] && b[i]>0 )
	   smallest=i;
	  }
	  b[smallest]--;
	  //printf("\n%d => p%d",time+1,smallest);
	  if(b[smallest]==0)
	  {
	   count++;
	   end=time+1;
	   completion[smallest] = end;
	   waiting[smallest] = end - a[smallest] - x[smallest];
	   turnaround[smallest] = end - a[smallest];
	   // printf("\n %d  %d   %d",smallest,wt[smallest],ttp[smallest]);
	  }
	 }
	 printf("pid \t burst \t arrival \twaiting \tturnaround \tcompletion");
	 for(i=0;i<n;i++)
	 {
	   printf("\n %d \t   %d \t %d\t\t%d   \t\t%d\t\t%d",i+1,x[i],a[i],waiting[i],turnaround[i],completion[i]);
	   avg = avg + waiting[i];
	   tt = tt + turnaround[i];
	 }
	 printf("\n  %If   %If",avg,tt);
	 printf("\n\nAverage waiting time = %lf\n",avg/n);
	 printf("Average Turnaround time = %lf",tt/n);
	 goto again;
}

else if(choice==1)
{
	int temp, i, j, limit, sum = 0, position;
      float average_wait_time, average_turnaround_time;
      int burst_time[20], process[20], waiting_time[20], turnaround_time[20];
      printf("\nEnter Total Number of Processes:\t");
      scanf("%d", &limit); 
      for(i = 0; i < limit; i++)
      {
            printf("Enter Burst Time For Process[%d]:\t", i + 1);
            scanf("%d", &burst_time[i]);
            process[i] = i + 1;
      }
      for(i = 0; i < limit; i++)
      {
            position = i;
            for(j = i + 1; j < limit; j++)
            {
                  if(burst_time[j] < burst_time[position])
                  {
                        position = j;
                  }
            }
            temp = burst_time[i];
            burst_time[i] = burst_time[position];
            burst_time[position] = temp;
            temp = process[i];
            process[i] = process[position];
            process[position] = temp;
      }	
      waiting_time[0] = 0;
      for(i = 1; i < limit; i++)
      {
            waiting_time[i] = 0;
            for(j = 0; j < i; j++)
            {
                  waiting_time[i] = waiting_time[i] + burst_time[j];
            } 
            sum = sum + waiting_time[i];
      }
      average_wait_time = (float)sum / limit;
      sum = 0;
      printf("\nProcess ID\t\tBurst Time\t Waiting Time\t Turnaround Time\n");
      for(i = 0; i < limit; i++)
      {
            turnaround_time[i] = burst_time[i] + waiting_time[i];
            sum = sum + turnaround_time[i];
            printf("\nProcess[%d]\t\t%d\t\t %d\t\t %d\n", process[i], burst_time[i], waiting_time[i], turnaround_time[i]);
      }
      average_turnaround_time = (float)sum / limit;
      printf("\nAverage Waiting Time:\t%f\n", average_wait_time);
      printf("\nAverage Turnaround Time:\t%f\n", average_turnaround_time);
      goto again;
}
}
